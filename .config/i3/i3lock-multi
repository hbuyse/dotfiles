#! /usr/bin/env bash

#Constants
DISPLAY_RE="([0-9]+)x([0-9]+)\\+([0-9]+)\\+([0-9]+)" # Regex to find display dimensions
CACHE_FOLDER="$HOME/.cache/i3lock-multimonitor/img/" # Cache folder
INSIDECOLOR=00000000
RINGCOLOR=ffffffff
KEYHLCOLOR=cc241dff
BSHLCOLOR=cc241dff
SEPARATORCOLOR=00000000
INSIDEVERCOLOR=00000000
INSIDEWRONGCOLOR=cc241dff
RINGVERCOLOR=ffffffff
RINGWRONGCOLOR=ffffffff
VERIFCOLOR=ffffffff
TIMECOLOR=fbf1c7ff
DATECOLOR=ebdbb2ff
LOGINBOX="#32302fff"
FONT="Hack"
LOCKTEXT='Allez! Viens! On est bien!'
WALLPAPER_CMD='feh --bg-fill --no-fehbg'

I3LOCK_COLOR_ARGS=(
    "-n"
    "--timepos=x+110:y+1010"
    "--datepos=x+35:y+1035"
    "--clock"
    "--date-align=1"
    "--datestr=\"${LOCKTEXT}\""
    "--insidecolor=${INSIDECOLOR}"
    "--ringcolor=${RINGCOLOR}"
    "--line-uses-inside"
    "--keyhlcolor=${KEYHLCOLOR}"
    "--bshlcolor=${BSHLCOLOR}"
    "--separatorcolor=${SEPARATORCOLOR}"
    "--insidevercolor=${INSIDEVERCOLOR}"
    "--insidewrongcolor=${INSIDEWRONGCOLOR}"
    "--ringvercolor=${RINGVERCOLOR}"
    "--ringwrongcolor=${RINGWRONGCOLOR}"
    "--indpos=x+300:y+1010"
    "--radius=25"
    "--ring-width=4"
    "--veriftext="
    "--wrongtext="
    "--noinputtext="
    "--verifcolor=${VERIFCOLOR}"
    "--timecolor=${TIMECOLOR}"
    "--datecolor=${DATECOLOR}"
    "--time-font=${FONT}"
    "--date-font=${FONT}"
    "--layout-font=${FONT}"
    "--verif-font=${FONT}"
    "--wrong-font=${FONT}"
    "--force-clock"
    "--pass-media-keys"
    "--timestr=%H:%M:%S"
)


# $1: number of pixels to convert
# $2: 1 for width. 2 for height
logical_px() {
	# get dpi value from xrdb
	local dpi
	dpi=$(grep -oP 'Xft.dpi:\s*\K\d+' "$HOME/.Xresources" | bc)
	if [ -z "$dpi" ]; then
		dpi=$(xdpyinfo | sed -En "s/\s*resolution:\s*([0-9]*)x([0-9]*)\s.*/\\$2/p" | head -n1)
	fi

	# return the default value if no DPI is set
	if [ -z "$dpi" ]; then
		echo "$1"
	else
		local scale
		scale=$(echo "scale=2; $dpi / 96.0" | bc)

		# check if scaling the value is worthy
		if [ "$(echo "$scale > 1.25" | bc -l)" -eq 0 ]; then
			echo "$1"
		else
			echo "$scale * $1 / 1" | bc
		fi
	fi
}

# $1: the background
update() {

	# use
	background="$1"

	# default blur level; fallback to 1
	[[ $blur_level ]] || blur_level=1

    add_loginbox "$background" "$LOGINBOX" 25 350 30 80

	# User supplied Image
	user_image="$folder/user_image.png"

	# create folder
	if [ ! -d "$folder" ]; then
		echo "Creating '$folder' directory to cache processed images."
		mkdir -p "$folder"
	fi

	# get random file in dir if passed argument is a dir
	rec_get_random "$background"

	# get user image
	cp "$user_input" "$user_image"
	if [ ! -f "$user_image" ]; then
		echo 'Please specify the path to the image you would like to use'
		exit 1
	fi

	# replace orignal with user image
	cp "$user_image" "$orig_wall"
	rm "$user_image"

	echo 'Generating alternate images based on the image you specified,'
	echo 'please wait this might take few seconds...'

	# wallpapers

	echo
	echo 'Converting provided image to match your resolution...'
	# resize image
	convert "$orig_wall" -resize "$res""^" -gravity center -extent "$res" "$resized"

	echo
	echo 'Applying dim, blur, and pixelation effect to resized image'
	# dim
	convert "$resized" -fill black -colorize 40% "$dim"

	# pixel
	convert -scale 10% -scale 1000% "$resized" "$pixel"

	# blur
	blur_shrink=$(echo "scale=2; 20 / $blur_level" | bc)
	blur_sigma=$(echo "scale=2; 0.6 * $blur_level" | bc)
	convert "$resized" \
		-filter Gaussian \
		-resize "$blur_shrink%" \
		-define "filter:sigma=$blur_sigma" \
		-resize "$res^" -gravity center -extent "$res" \
		"$blur"

	# dimblur
	convert "$dim" \
		-filter Gaussian \
		-resize "$blur_shrink%" \
		-define "filter:sigma=$blur_sigma" \
		-resize "$res^" -gravity center -extent "$res" \
		"$dimblur"

	# lockscreen backgrounds

	echo
	echo 'Caching images for faster screen locking'
	# resized
	convert "$resized" -draw "fill #$loginbox $rectangles" "$l_resized"

	# dim
	convert "$dim" -draw "fill #$loginbox $rectangles" "$l_dim"

	# blur
	convert "$blur" -draw "fill #$loginbox $rectangles" "$l_blur"

	# dimblur
	convert "$dimblur" -draw "fill #$loginbox $rectangles" "$l_dimblur"

	# pixel
	convert "$pixel" -draw "fill #$loginbox $rectangles" "$l_pixel"
	echo
	echo 'All required changes have been applied'
}

# Add the loginbox on an image
# $1: the image
# $2: the color (HTML format)
# $3: loginbox X position
# $4: loginbox width
# $5: loginbox Y position
# $6: loginbox height
add_loginbox() {
    local img="$1"
    local color="$2"
    local loginbox_x="$3"
    local loginbox_width="$4"
    local loginbox_y="$5"
    local loginbox_height="$6"
    local rectangles=" "
    local sr=$(xrandr --query | grep ' connected' | grep -o '[0-9][0-9]*x[0-9][0-9]*[^ ]*')

    for res in $sr; do
        local sra, cx, cy
        sra=(${res//[x+]/ })
        cx=$((sra[2] + $(logical_px $loginbox_x  1)))
        cy=$((sra[1] - $(logical_px $loginbox_y 2)))
        rectangles+="rectangle $cx,$cy $((cx+$(logical_px $loginbox_width 1))),$((cy-$(logical_px $loginbox_height 2))) "
    done

    # Fill the image with the loginbox
    convert "$img" -draw "fill ${color} ${rectangles}" "${img}"
}

lock() {
    local background="$1"
    local lock_args="$2"
    eval i3lock "${I3LOCK_COLOR_ARGS[*]}" -i "$background" "$lock_args"
}

# $1: background image
generate_output_image() {
    local line
    local screen_width
    local screen_height
    local screen_x
    local screen_y
    local background
    local md5_bkg_img
    local output_img
    local cached_img

    # Decide size to cover all screens
    local output_img_width=0
    local output_img_height=0
    local params=""

    background="$1"
    md5_bkg_img="$2"
    output_img="$3"

    # Execute xrandr to get information about the monitors:
    while read line
    do
      # If we are reading the line that contains the position information:
      if [[ $line =~ $DISPLAY_RE ]]; then
        # Extract information and append some parameters to the ones that will be given to ImageMagick:
        screen_width=${BASH_REMATCH[1]}
        screen_height=${BASH_REMATCH[2]}
        screen_x=${BASH_REMATCH[3]}
        screen_y=${BASH_REMATCH[4]}

        cached_img="${CACHE_FOLDER}/${screen_width}x${screen_height}.${md5_bkg_img}.png"
        ## if cache for that screensize doesnt exist
        if ! [ -e "${cached_img}" ]
        then
            # Create image for that screensize
            eval convert "${background}" '-resize' '${screen_width}X${screen_height}^' '-gravity' 'Center' '-crop' '${screen_width}X${screen_height}+0+0' '+repage' '$cached_img'

            add_loginbox "$cached_img" "$LOGINBOX" 25 350 30 80
        fi

        # Decide size of output image
        if (( output_img_width < screen_width+screen_x )); then output_img_width=$((screen_width+screen_x)); fi;
        if (( output_img_height < screen_height+screen_y )); then output_img_height=$(( screen_height+screen_y )); fi;

        params="$params -type TrueColor $cached_img -geometry +$screen_x+$screen_y -composite "
      fi
    done <<<"$(xrandr)"

    #Execute ImageMagick:
    eval convert -size "${output_img_width}x${output_img_height}" 'xc:black' "$output_img"
    eval convert "$output_img" "$params" "$output_img"
}

if ! [ -e "$CACHE_FOLDER" ]; then
    mkdir -p "$CACHE_FOLDER"
fi

#Passed arguments
while getopts ":i:a:" opt; do
    case $opt in
        i)
            arg_image="$OPTARG"
            ;;
        a)
            lock_args="$OPTARG"
            ;;
        \?)
            echo "Invalid option -$OPTARG" >&2
            exit 1
            ;;
    esac
done

#Image paths
if [ "$arg_image" ]; then
    BKG_IMG="$arg_image"  # Passed image
elif [ -f "/usr/share/i3lock-multimonitor/img/background.png" ]; then
    BKG_IMG="/usr/share/i3lock-multimonitor/img/background.png"  # Default image
else
    BKG_IMG="$(dirname "${BASH_SOURCE[0]}")/img/background.png"  # Fallback to current folder
fi

if ! [ -e "$BKG_IMG" ]; then
    echo "No background image! Exiting..."
    exit 2
fi

MD5_BKG_IMG=$(md5sum "$BKG_IMG" | cut -c 1-10)
MD5_SCREEN_CONFIG=$(xrandr | md5sum - | cut -c 1-32) # Hash of xrandr output
OUTPUT_IMG="${CACHE_FOLDER}${MD5_SCREEN_CONFIG}.${MD5_BKG_IMG}.png" # Path of final image
OUTPUT_IMG_WIDTH=0 # Decide size to cover all screens
OUTPUT_IMG_HEIGHT=0 # Decide size to cover all screens

if [ "$lock_args" ]; then
    LOCK_ARGS="$lock_args"  # Passed command
else
    LOCK_ARGS="-t -e"  # Default
fi

if [ -e "$OUTPUT_IMG" ]
then
    # Lock screen since image already exists
    lock "$OUTPUT_IMG" "-t -e"
    exit 0
fi

generate_output_image "$BKG_IMG" "$MD5_BKG_IMG" "$OUTPUT_IMG"

#Lock the screen:
lock "$OUTPUT_IMG" "$LOCK_ARGS"
# vim: set ts=4 sw=4 tw=0 et :
