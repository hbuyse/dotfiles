#! /usr/bin/env bash

# shellcheck disable=all
#
readonly RED="\e[1;31m"
readonly GREEN="\e[1;32m"
readonly YELLOW="\e[1;33m"
readonly DEFAULT="\e[0m"

readonly OS="{{- .chezmoi.os }}"
readonly ID="{{- .chezmoi.osRelease.id }}"
{{- if index .chezmoi.osRelease "idLike" }}
readonly IDLIKE="{{- .chezmoi.osRelease.idLike }}"
{{- else }}
readonly IDLIKE=""
{{- end }}

prompt () {
    echo -en "$*: "
}

display_already_installed() {
    echo -e "${YELLOW}already installed${DEFAULT}"
}

display_ko_ok() {
    [ "${1}" -eq 0 ] && echo -e "${GREEN}OK${DEFAULT}" || echo -e "${RED}KO${DEFAULT}"
}

cmdexists() {
    command -v "$1" > /dev/null && return 0 || return 1;
}

npm_install() {
    local package="${1}"
    local version="${2}"
    local pkg_and_version="${package}@${version}"

    if [ -n "$(npm list --location=global -p ${pkg_and_version})" ]; then
        prompt "Installing '${pkg_and_version}' using npm"
        display_already_installed
    elif [ -n "$(npm list --location=global -p ${package})" ]; then
        prompt "Updating '${package}' to version '${version}' using npm"
        npm install --silent --location=global "${pkg_and_version}"
        local err=${?}
        if [ ${err} -eq 0 ]; then
            prompt "Updating '${package}' to version '${version}' using npm"
        fi
        display_ko_ok ${err}
    else
        prompt "Installing '${package} v${version}' using npm"
        npm install --silent --location=global "${pkg_and_version}"
        local err=${?}
        prompt "Installing '${package}' using npm"
        display_ko_ok ${err}
    fi
}

cargo_install() {
    local package="${1}"
    local version_and_features="${2}"
    local version="$(echo "${version_and_features}" | cut -d',' -f1)"
    local features="$(echo "${version_and_features}" | cut -d',' -f2-)"

    if [ "${version}" == "${features}" ]; then
        features=""
    fi

    if cargo install --list | grep -q "${package} v${version}"; then
        prompt "Installing '${package} v${version}' using cargo"
        display_already_installed
    else
        if cargo install --list | grep -q "${package}"; then
            prompt "Updating '${package}' to version '${version}' using cargo"
        else
            prompt "Installing '${package} v${version}' using cargo"
        fi
        if [ -z "${features}" ]; then
            cargo install --version="${version}" --quiet --jobs=4 "${package}"
        else
            cargo install --version="${version}" --features="${features}" --quiet --jobs=4 "${package}"
        fi
        local err=${?}
        display_ko_ok ${err}
    fi
}

pip_install() {
    local package="${1}"
    local version="${2}"

    if pip freeze --local | grep -q "${package}==${version}"; then
        prompt "Installing '${package} v${version}' using pip"
        display_already_installed
    else
        local upgrade_opt=""
        if pip freeze --local | grep -q "${package}"; then
            prompt "Updating '${package}' to version '${version}' using pip"
            upgrade_opt="--upgrade"
        else
            prompt "Installing '${package} v${version}' using pip"
        fi
        pip install --quiet --user ${upgrade_opt} "${package}==${version}"
        local err=${?}
        display_ko_ok ${err}
    fi
}

# Install packages based on the OS.
# Check that the package is installed before installing it.
install_packages() {
    local packages_to_install=("$@")
    local packages_not_installed=()
    local install_cmd=""

    # Get the command to install package and check that package is installed
    case "${OS}-${ID}" in
        "linux-manjaro")
            install_cmd="pacman --sync --refresh --refresh --sysupgrade --needed --noconfirm"
            for pkg in ${packages_to_install[@]}; do
                if ! pacman --query --search --quiet "${pkg}"; then
                    packages_not_installed+=("${pkg}")
                fi
            done
            ;;

        "linux-ubuntu")
            install_cmd="apt-get install --assume-yes --quiet"
            # Check that package is installed
            for pkg in "${packages_to_install[@]}"; do
                # Check if already installed
                if ! dpkg --get-selections| grep -w "${pkg}" | awk '{ print $2 }' | grep -q -w 'install'; then
                    packages_not_installed+=("${pkg}")
                fi
            done
            ;;

        "freebsd-freebsd")
            install_cmd="pkg install --automatic --yes"
            # Check that package is installed
            for pkg in "${packages_to_install[@]}"; do
                # Check if already installed
                if ! pkg info | grep -qw "${pkg}"; then
                    packages_not_installed+=("${pkg}")
                fi
            done
            ;;

        *)
            echo "Unsupported distribution: '${DISTRIB_ID}'"
            return
            ;;
    esac

    # Install only the packages that are not already installed
    if [ ${#packages_not_installed[@]} -ne 0 ]; then
        prompt "Installing ${packages_not_installed[*]}: "
        sudo ${install_cmd} ${packages_not_installed[*]}
        display_ko_ok $?
    fi
}

# Display some informations about the install
echo "==================================="
echo "Script: ${0}"
echo "-----------------------------------"
echo "Operating System: ${OS}"
echo "Distribution ID: ${ID}"
echo "Distribution IDLike: ${IDLIKE}"
echo "==================================="

prompt "Asking for 'sudo' rights: "
sudo -p "" echo -n
display_ko_ok ${?}

if [[ "${OS}" == "linux" ]]; then
    case "${ID}" in
        "manjaro")
            # Install my package
            install_packages \
                age \
                chezmoi \
                feh \
                firefox \
                htop \
                i3-wm \
                rofi \
                npm \
                shellcheck \
                zsh \
                curl \
                clang \
                autorandr \
                base-devel \
                xautolock \
                git \
                git-lfs \
                tmux \
                python-pip python-virtualenv python-virtualenvwrapper \
                polybar \
                feh

            if ! cmdexists paru; then
                git clone https://aur.archlinux.org/paru.git /tmp/paru
                (cd paru && makepkg -si)
                rm -rf /tmp/paru
            fi

            paru -Sy cava
            ;;

        "ubuntu")
            # Add PPAs
            echo "Installing PPAs"
            for i in "git-core/ppa" "yubico/stable" "regolith-linux/stable" "hsheth2/ppa"; do
                prompt "- ${i}:"
                if grep -riq "${i}" "/etc/apt/sources.list.d"; then
                    display_already_installed
                else
                    sudo add-apt-repository -ny ppa:${i}
                    display_ko_ok $?
                fi
            done

            # Install packages (nodejs = node + npm)
            prompt "Installing Node JS 18 (LTS) repo"
            if grep -q "https://deb.nodesource.com/node_18.x" /etc/apt/sources.list.d/nodesource.list; then
                display_already_installed
            else
                curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - > /dev/null
                display_ko_ok $?
            fi

            # Refresh packages list
            prompt "Updating packages list: "
            sudo apt-get update --quiet --quiet
            display_ko_ok $?

            install_packages \
                yubikey-manager \
                yubikey-personalization-gui \
                libpam-yubico \
                libpam-u2f \
                meld \
                git git-lfs \
                nodejs \
                i3-gaps \
                python3-pip \
                python3-dev \
                shellcheck \
                zsh \
                curl \
                cava

            # Install dunst
            DUNST_VERSION="1.9.2"
            prompt "Installing dunst v${DUNST_VERSION}: "
            if cmdexists dunst || ! dunst --version | grep -q ${DUNST_VERSION}; then
                display_already_installed
            else
                # Dunst dependencies
                echo
                prompt "- Installing dependencies: "
                install_packages \
                    libdbus-1-dev \
                    libx11-dev \
                    libxinerama-dev \
                    libxrandr-dev \
                    libxss-dev \
                    libglib2.0-dev \
                    libpango1.0-dev \
                    libgtk-3-dev \
                    libxdg-basedir-dev
                display_ko_ok $?

                prompt "- Downloading and extracting source code:"
                curl --location --silent "https://github.com/dunst-project/dunst/archive/refs/tags/v${DUNST_VERSION}.tar.gz" | tar -xz -C /tmp -f -
                display_ko_ok $?

                prompt "- Compiling source code: "
                make -C /tmp/dunst-${DUNST_VERSION} PREFIX=${HOME}/.local install
                display_ko_ok $?

                rm -rf /tmp/dunst-${DUNST_VERSION}
            fi

            # Install i3lock color
            I3LOCK_COLOR_VERSION="2.13.c.4"
            prompt "Installing i3lock-color v${I3LOCK_COLOR_VERSION}: "
            if cmdexists i3lock && i3lock --version 2>&1 | grep -q ${I3LOCK_COLOR_VERSION}; then
                display_already_installed
            else
                # Install i3lock-color
                prompt "- Installing dependencies: "
                install_packages \
                    autoconf \
                    gcc \
                    make \
                    pkg-config \
                    libpam0g-dev \
                    libcairo2-dev \
                    libfontconfig1-dev \
                    libxcb-composite0-dev \
                    libev-dev \
                    libx11-xcb-dev \
                    libxcb-xkb-dev \
                    libxcb-xinerama0-dev \
                    libxcb-randr0-dev \
                    libxcb-image0-dev \
                    libxcb-util-dev \
                    libxcb-xrm-dev \
                    libxkbcommon-dev \
                    libxkbcommon-x11-dev \
                    libjpeg-dev
                display_ko_ok $?

                prompt "- Downloading and extracting source code:"
                curl --location --silent "https://github.com/Raymo111/i3lock-color/archive/refs/tags/${I3LOCK_COLOR_VERSION}.tar.gz" | tar -xz -C /tmp -f -
                display_ko_ok $?

                prompt "- Compiling source code: "
                autoreconf -fiv /tmp/i3lock-color-${I3LOCK_COLOR_VERSION}
                mkdir -p /tmp/i3lock-color-${I3LOCK_COLOR_VERSION}/build
                cd /tmp/i3lock-color-${I3LOCK_COLOR_VERSION}/build
                /tmp/i3lock-color-${I3LOCK_COLOR_VERSION}/configure --disable-sanitizers --prefix=${HOME}/.local
                cd -
                make -C /tmp/i3lock-color-${I3LOCK_COLOR_VERSION}/build PREFIX=${HOME}/.local install
                display_ko_ok $?

                rm -rf /tmp/i3lock-color-${I3LOCK_COLOR_VERSION}
            fi

            # Install rust-analyzer
            curl -L https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-unknown-linux-gnu.gz | gunzip -c - > $HOME/.local/bin/rust-analyzer
            chmod +x $HOME/.local/bin/rust-analyzer
            ;;

        *)
            echo "Unsupported Linux distribution: '${DISTRIB_ID}'"
            ;;
    esac

    # Install Papirus icon theme
    ICON_DIR="$HOME/.local/share/icons"
    ICON_THEME="Papirus"
    prompt "Installing Papirus Icon theme"
    if [ ! -d "${ICON_DIR}/${ICON_THEME}" ]; then
        wget -qO- https://git.io/papirus-icon-theme-install | DESTDIR="${ICON_DIR}" ICON_THEMES="${ICON_THEME}" sh
        display_ko_ok $?
    else
        display_already_installed
    fi
elif [[ "${OS}" == "freebsd" ]]; then
    # Copy /etc/pkg/FreeBSD.conf and change to https
    FREEBSD_PKG_REPOS="/usr/local/etc/pkg/repos"
    if [ ! -f ${FREEBSD_PKG_REPOS}/FreeBSD.conf ]; then
        prompt "Copy pkg config to ${FREEBSD_PKG_REPOS}/FreeBSD.conf: "
        sudo mkdir -p ${FREEBSD_PKG_REPOS}
        sudo cp /etc/pkg/FreeBSD.conf ${FREEBSD_PKG_REPOS}/FreeBSD.conf
        display_ko_ok $?
        prompt "Change URL to HTTPS: "
        sudo sed -i -e 's/pkg\+http:/pkg\+https:/' -e 's/latest/quaterly/' ${FREEBSD_PKG_REPOS}/FreeBSD.conf
        display_ko_ok $?
    fi

    # Install packages
    install_packages \
        age \
        chezmoi \
        tshark \
        tree \
        git-lfs \
        npm \
        ripgrep \
        fd-find \
        py39-pip \
        hs-ShellCheck \
        zsh \
        curl \
        rust-analyzer \
        wget \
        pkgconf \
        gmake \
        cmake \
        fzf \
        libtool \
        gettext \
        neovim
fi

# Install npm packages
if cmdexists npm; then
    declare -A NPM_PKGS=(
        ["@marp-team/marp-cli"]="3.2.0"
        ["bash-language-server"]="5.0.0"
        ["diff-so-fancy"]="1.4.3"
        ["neovim"]="4.10.1"
        ["npm"]="9.8.1"
        ["pyright"]="1.1.323"
        ["typescript"]="5.1.6"
        ["typescript-language-server"]="3.3.2"
        ["vscode-langservers-extracted"]="4.7.0"
        ["yaml-language-server"]="1.14.0"
    )
    for pkg in ${!NPM_PKGS[*]}; do
        npm_install "${pkg}" "${NPM_PKGS[${pkg}]}"
    done
fi

# Check ZSH is my shell
if ! grep -i $USER /etc/passwd | cut -d: -f 7 | grep -q zsh; then
    prompt "Changing shell to $(which zsh)"
    chsh -s "$(which zsh)"
fi

# Rustup
[[ "${OS}" == "freebsd" ]] && RUST_DEFAULT_HOST="x86_64-unknown-freebsd" || RUST_DEFAULT_HOST="x86_64-unknown-linux-gnu"
if ! cmdexists rustup; then
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -q --no-modify-path --default-host ${RUST_DEFAULT_HOST} --default-toolchain none --profile default -y
    rustup default stable
# Use the redirection since rustup check throw a Broken Pipe when filtering with grep -q
elif ! rustup check | grep "stable-${RUST_DEFAULT_HOST} - Up to date" > /dev/null; then
    rustup update
fi

# Rust compiler
source ${HOME}/.cargo/env
if ! cmdexists "rustc"; then
    rustup install toolchain stable
fi

# Install cargo package
if cmdexists cargo; then
    declare -A CARGO_PKGS=(
        ["bottom"]="0.9.3"
        ["fd-find"]="8.7.0"
        ["stylua"]="0.18.1"
        ["texlab"]="4.3.2"
        ["ripgrep"]="13.0.0"
        ["du-dust"]="0.8.6"
        ["bat"]="0.23.0"
    )

    if [[ "${OS}" == "linux" ]]; then
        CARGO_PKGS+=(
            ["alacritty"]="0.12.2"
            ["spotify-tui"]="0.25.0"
            ["spotifyd"]="0.3.5,pulseaudio_backend"
        )
    fi

    for pkg in ${!CARGO_PKGS[*]}; do
        cargo_install "${pkg}" "${CARGO_PKGS[${pkg}]}"
    done
fi

if cmdexists pip; then
    declare -A PIP_PKGS=(
        ["cmake-language-server"]="0.1.7"
        ["robotframework-lsp"]="1.11.0"
    )

    for pkg in ${!PIP_PKGS[*]}; do
        pip_install "${pkg}" "${PIP_PKGS[${pkg}]}"
    done
fi

# vim: set ts=4 sw=4 tw=0 et ft=sh :
