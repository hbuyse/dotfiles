#! /usr/bin/env bash

readonly RED="\e[1;31m"
readonly GREEN="\e[1;32m"
readonly YELLOW="\e[1;33m"
readonly DEFAULT="\e[0m"

prompt () {
    echo -en "$*: "
}

display_already_installed() {
    echo -e "${YELLOW}already installed${DEFAULT}"
}

display_ko_ok() {
    [ ${1} -eq 0 ] && echo -e "${GREEN}OK${DEFAULT}" || echo -e "${RED}KO${DEFAULT}"
}

cmdexists() {
    command -v "$1" > /dev/null && return 0 || return 1;
}

npm_install() {
    local pkg_and_version="${1}"
    local package="$(echo ${pkg_and_version} | cut -d'@' -f1)"
    local version="$(echo ${pkg_and_version} | cut -d'@' -f2)"

    # Fix when package starts with '@'
    if [ -z "${package}" ]; then
        package="$(echo ${pkg_and_version} | cut -d'@' -f2)"
        version="$(echo ${pkg_and_version} | cut -d'@' -f3)"
    fi

    if [ -n "$(npm list --location=global -p ${pkg_and_version})" ]; then
        prompt "Installing '${pkg_and_version}' using npm"
        display_already_installed
    elif [ -n "$(npm list --location=global -p ${package})" ]; then
        prompt "Updating '${package}' to version '${version}' using npm"
        npm install --silent --location=global "${pkg_and_version}"
        local err=${?}
        if [ ${err} -eq 0 ]; then
            prompt "Updating '${package}' to version '${version}' using npm"
        fi
        display_ko_ok ${err}
    else
        prompt "Installing '${1}' using npm"
        npm install --silent --location=global "${pkg_and_version}"
        local err=${?}
        prompt "Installing '${1}' using npm"
        display_ko_ok ${err}
    fi
}

prompt "Asking for 'sudo' rights: "
sudo echo -n
display_ko_ok ${?}

{{ if eq .chezmoi.os "linux" }}
{{   if eq .chezmoi.osRelease.id "manjaro" -}}
# Install my package
sudo pacman --sync --refresh --refresh --sysupgrade --needed --noconfirm \
    age \
    alacritty \
    bat \
    bottom \
    chezmoi \
    feh \
    firefox \
    htop \
    i3-gaps \
    rofi \
    npm \
    shellcheck \
    zsh \
    curl \
    clang \
    ripgrep \
    fd

{{   else if eq .chezmoi.osRelease.id "ubuntu" -}}
# Add PPAs
echo "Installing PPAs"
for i in "git-core/ppa" "yubico/stable" "regolith-linux/stable"; do
    prompt "- ${i}:"
    if grep -riq "${i}" "/etc/apt/sources.list.d"; then
        display_already_installed
    else
        sudo add-apt-repository -ny ppa:${i}
        display_ko_ok $?
    fi
done

prompt "Installing Node JS 16 (LTS) repo"
if grep -q "https://deb.nodesource.com/node_16.x" /etc/apt/sources.list.d/nodesource.list; then
    display_already_installed
else
    curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - > /dev/null
    display_ko_ok $?
fi

# Refresh packages list
prompt "Updating packages list: "
sudo apt-get update --quiet --quiet
display_ko_ok $?

# Install packages (nodejs = node + npm)
UBUNTU_PKGS=(yubikey-manager yubikey-personalization-gui libpam-yubico libpam-u2f meld git git-lfs nodejs i3-gaps python3-pip python3-dev shellcheck zsh curl ripgrep fd-find)
prompt "Installing ${UBUNTU_PKGS[*]}: "
sudo apt-get install --assume-yes --quiet ${UBUNTU_PKGS[*]}
display_ko_ok $?

# Install dunst
DUNST_VERSION="1.8.1"
prompt "Installing dunst v${DUNST_VERSION}: "
if cmdexists dunst || ! dunst --version | grep -q ${DUNST_VERSION}; then
    display_already_installed
else
    # Dunst dependencies
    echo
    prompt "- Installing dependencies: "
    sudo apt-get install --assume-yes --quiet \
        libdbus-1-dev \
        libx11-dev \
        libxinerama-dev \
        libxrandr-dev \
        libxss-dev \
        libglib2.0-dev \
        libpango1.0-dev \
        libgtk-3-dev \
        libxdg-basedir-dev
    display_ko_ok $?

    prompt "- Downloading and extracting source code:"
    curl --location --silent "https://github.com/dunst-project/dunst/archive/refs/tags/v${DUNST_VERSION}.tar.gz" | tar -xz -C /tmp -f -
    display_ko_ok $?

    prompt "- Compiling source code: "
    make -C /tmp/dunst-${DUNST_VERSION} PREFIX=${HOME}/.local install
    display_ko_ok $?

    rm -rf /tmp/dunst-${DUNST_VERSION}
fi

# Install i3lock color
I3LOCK_COLOR_VERSION="2.13.c.4"
prompt "Installing i3lock-color v${I3LOCK_COLOR_VERSION}: "
if cmdexists i3lock && i3lock --version 2>&1 | grep -q ${I3LOCK_COLOR_VERSION}; then
    display_already_installed
else
    # Install i3lock-color
    prompt "- Installing dependencies: "
    sudo apt-get install --assume-yes --quiet \
        autoconf \
        gcc \
        make \
        pkg-config \
        libpam0g-dev \
        libcairo2-dev \
        libfontconfig1-dev \
        libxcb-composite0-dev \
        libev-dev \
        libx11-xcb-dev \
        libxcb-xkb-dev \
        libxcb-xinerama0-dev \
        libxcb-randr0-dev \
        libxcb-image0-dev \
        libxcb-util-dev \
        libxcb-xrm-dev \
        libxkbcommon-dev \
        libxkbcommon-x11-dev \
        libjpeg-dev
    display_ko_ok $?

    prompt "- Downloading and extracting source code:"
    curl --location --silent "https://github.com/Raymo111/i3lock-color/archive/refs/tags/${I3LOCK_COLOR_VERSION}.tar.gz" | tar -xz -C /tmp -f -
    display_ko_ok $?

    prompt "- Compiling source code: "
    autoreconf -fiv /tmp/i3lock-color-${I3LOCK_COLOR_VERSION}
    mkdir -p /tmp/i3lock-color-${I3LOCK_COLOR_VERSION}/build
    cd /tmp/i3lock-color-${I3LOCK_COLOR_VERSION}/build
    /tmp/i3lock-color-${I3LOCK_COLOR_VERSION}/configure --disable-sanitizers --prefix=${HOME}/.local
    cd -
    make -C /tmp/i3lock-color-${I3LOCK_COLOR_VERSION}/build PREFIX=${HOME}/.local install
    display_ko_ok $?

    rm -rf /tmp/i3lock-color-${I3LOCK_COLOR_VERSION}
fi


# Install rust-analyzer
curl -L https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-unknown-linux-gnu.gz | gunzip -c - > $HOME/.local/bin/rust-analyzer
chmod +x $HOME/.local/bin/rust-analyzer
{{   end -}}
{{ end -}}

{{ if eq .chezmoi.os "freebsd" -}}
# Install packages
sudo pkg install --automatic --yes \
    age \
    chezmoi \
    tshark \
    tree \
    git-lfs \
    npm \
    ripgrep \
    fd-find \
    py38-pip \
    hs-ShellCheck \
    zsh \
    curl \
    rust-analyzer

{{ end -}}

# Compile Neovim
NEOVIM_VERSION="0.7.2"
prompt "Installing Neovim v${NEOVIM_VERSION}"
if cmdexists "nvim" && nvim --version | grep -q ${NEOVIM_VERSION}; then
    display_already_installed
else
    prompt "- Downloading Neovim ${NEOVIM_VERSION}"
    wget -O- https://github.com/neovim/neovim/archive/refs/tags/v${NEOVIM_VERSION}.tar.gz | tar -xz -C /tmp -f -
    display_ko_ok $?

    prompt "- Compiling Neovim ${NEOVIM_VERSION}"
{{ if eq .chezmoi.os "freebsd" -}}
    gmake CMAKE_BUILD_TYPE=Release CMAKE_INSTALL_PREFIX=~/.local -C /tmp/neovim-${NEOVIM_VERSION} -j4 install
{{ else }}
    make CMAKE_BUILD_TYPE=Release CMAKE_INSTALL_PREFIX=~/.local -C /tmp/neovim-${NEOVIM_VERSION} -j4 install
{{ end }}
    display_ko_ok $?

    prompt "- Removing /tmp/neovim-${NEOVIM_VERSION}"
    rm -rf /tmp/neovim-${NEOVIM_VERSION}
    display_ko_ok $?
fi

# Install npm packages
if cmdexists npm; then
    NPM_PKGS=(
        "npm@8.13.1"
        "diff-so-fancy@1.4.3"
        "pyright@1.1.256"
        "bash-language-server@3.0.4"
        "vscode-langservers-extracted@4.2.1"
        "neovim@4.10.1"
        "@marp-team/marp-cli@2.0.4"
    )
    for pkg in ${NPM_PKGS[*]}; do
        npm_install "${pkg}"
    done
fi

# Check ZSH is my shell
if ! grep -i $USER /etc/passwd | cut -d: -f 7 | grep -q zsh; then
    prompt "Changing shell to $(which zsh)"
    chsh -s "$(which zsh)"
fi

# Rustup
if ! cmdexists rustup; then
{{ if eq .chezmoi.os "freebsd" }}
    RUST_DEFAULT_HOST="x86_64-unknown-freebsd"
{{ else }}
    RUST_DEFAULT_HOST="x86_64-unknown-linux-gnu"
{{ end }}
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -q --no-modify-path --default-host ${RUST_DEFAULT_HOST} --default-toolchain none --profile default -y
fi

# Rust compiler
if ! cmdexists "rustc"; then
    source ${HOME}/.cargo/env
    rustup install toolchain stable
fi

{{ if ne .chezmoi.os "freebsd" }}
# Install Papirus icon theme
ICON_DIR="$HOME/.local/share/icons"
ICON_THEME="Papirus"
prompt "Installing Papirus Icon theme"
if [ ! -d "${ICON_DIR}/${ICON_THEME}" ]; then
    wget -qO- https://git.io/papirus-icon-theme-install | DESTDIR="${ICON_DIR}" ICON_THEMES="${ICON_THEME}" sh
    display_ko_ok $?
else
    display_already_installed
fi
{{ end }}

# vim: set ts=4 sw=4 tw=0 et ft=sh :
